#!/bin/bash
## Comfortable Swipe (comfortable-swipe)
basename="$(basename "$0")"
version="$(cat VERSION)"  # this will be hardcoded upon install


# turn on errors per line
set -e

usage=


# show help
function help {
cat <<EOF
Usage: $basename [--help|--version] <command> [<args>]

    -h, --help        show this help text
    -v, --version     print the program version

Commands:
    start
      starts 3/4-finger gesture service

    stop
      stops 3/4-finger gesture service

    restart
      restarts 3/4-finger gesture service

    autostart [on|off|toggle|status|path]
      toggle to automatically run on startup automatically run on startup (toggleable)

    buffer
      parses output of libinput debug-events

    help
      shows the help dialog

    config
      shows the location of the config file

    debug
      logs raw output from input events taken from libinput

    status
      checks status of program and autostart

Report bugs to https://github.com/Hikari9/comfortable-swipe/issues/new
EOF
}


# start comfortable-swipe
# internally pipes debug text to the buffer
function start {
  debug | buffer
}


# stop running comfortable-swipe commands (except self)
function stop {
  local pids="$(pgrep -f comfortable-swipe | fgrep -v $$)"
  local stopped=""
  for pid in "$pids"; do
    # stop process tree
    if kill -- -$pid 2> /dev/null; then
      stopped=" $(echo $pid)"
    fi
  done
  if [[ ! -z "$stopped" ]]; then
    echo "comfortable-swipe stopped"
  else
    echo "comfortable-swipe is not running"
  fi
}


# restart comfortable swipe
function restart {
  stop > /dev/null 2>&1
  start
}


# parse input from a buffer
# internally calls comfortable-swipe-buffer (make sure installed)
function buffer {
  exec comfortable-swipe-buffer "$@"
}


# get location of configuration file
function config {
  # TODO: invoke subcommands
  echo "$HOME/.config/comfortable-swipe.conf"
}


# show debug text
# internally just calls libinput debug-events
function debug {
  if command -v libinput-debug-events > /dev/null 2>&1; then
    local DEBUGEVENTS="libinput-debug-events"
  else
    local DEBUGEVENTS="libinput debug-events"
  fi
  stdbuf -oL -e0 $DEBUGEVENTS 2> >(fgrep -v 'double tracking')
}


# enable or disable autostart
# you can also set manually by running: gnome-session-properties
function autostart {
  local AUTOSTART="$HOME/.config/autostart/comfortable-swipe.desktop"
  local ENABLED="X-GNOME-Autostart-enabled"
  # show autostart file path
  function path {
    echo "$AUTOSTART"
  }
  # echo autostart status: ON, OFF, MISSING, INVALID
  function status {
    if [[ ! -f "$AUTOSTART" ]]; then
      echo "MISSING"
    elif fgrep "$ENABLED=true" < "$AUTOSTART" > /dev/null; then
      echo "ON"
    elif fgrep "$ENABLED=false" < "$AUTOSTART" > /dev/null; then
      echo "OFF"
    else
      echo "INVALID"
    fi
  }
  # enable autostart
  function on {
    sed -i "s/$ENABLED=false/$ENABLED=true/" "$AUTOSTART"
    echo "Autostart switched on"
  }
  # disable autostart
  function off {
    sed -i "s/$ENABLED=true/$ENABLED=false/" "$AUTOSTART"
    echo "Autostart switched off"
  }
  # toggle to opposite autostart status
  function toggle {
    [[ $(status) = ON ]] && off || on
  }
  if [[ $# -eq 0 ]]; then
    # default behavior is to toggle
    toggle
  elif declare -f "$1" >/dev/null 2>&1; then
    # invoke subcommand function, passing arguments through
    "$@" # same as "$1" "$2" "$3" ... for full argument list
  else
    echo "Function $1 not recognized" >&2
    echo "Usage: comfortable-swipe autostart [on|off|toggle|status|path]" >&2
    exit 1
  fi
}


# verbosely show comfortable-swipe status
function status {
  # TODO: show configuration status as well
  echo "autostart is $(autostart status)"
  if pgrep -f comfortable-swipe | fgrep -v $$ > /dev/null 2>&1; then
    echo "comfortable-swipe program is RUNNING"
  else
    echo "comfortable-swipe program is STOPPED"
  fi
}


####################
# COMMAND OPTIONS  #
####################
for i in "$@"; do
case $i in
  -h | --help) # eagerly show help
    help
    exit 0
  ;;
  -v | --version) # eagerly print version
    echo "$version"
    exit 0
  ;;
  *) # unknown option
    echo "Unknown option: $i" >&2
    exit 1
  ;;
esac
done

############
# DISPATCH #
############

if [[ $# -eq 0 ]]; then
  # no options; just show help
  help
elif declare -f "$1" >/dev/null 2>&1; then
  # invoke subcommand function, passing arguments through
  "$@" # same as "$1" "$2" "$3" ... for full argument list
else
  echo "error: function $1 not recognized" >&2
  echo "full usage: comfortable-swipe --help" >&2
  exit 1
fi
